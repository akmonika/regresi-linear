library(car)
data("mtcars")
fit <- lm(mpg~disp+hp+wt+drat, data=mtcars)
summary(fit) # show results

# Other useful functions
coefficients(fit) # model coefficients
confint(fit, level=0.95) # CIs for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
vcov(fit) # covariance matrix for model parameters
influence(fit) # regression diagnostics

# diagnostic plots
# optional 4 graphs/page
layout(matrix(c(1,2,3,4),2,2)) 
plot(fit)

# compare models
fit1 <- lm(mpg~disp+hp+wt+drat, data=mtcars)
fit2 <- lm(mpg~disp+hp+wt, data=mtcars)
anova(fit1, fit2)

# REGRESSION DIAGNOSTIC
# Assume that we are fitting a multiple linear regression
# on the MTCARS data
# Assessing Outliers

install.packages("qqplotr")
# Bonferonni p-value for most extreme obs
outlierTest(fit) 
#qq plot for studentized resid
qqPlot(fit, main="QQ Plot") 
# leverage plots
leveragePlots(fit) 

# Influential Observations
# added variable plots
av.Plots(fit)
# Cook's D plot
# identify D values > 4/(n-k-1)
cutoff <- 4/((nrow(mtcars)-length(fit$coefficients)-2))
plot(fit, which=4, cook.levels=cutoff)
# Influence Plot
influencePlot(fit, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )

# Normality of Residuals
# qq plot for studentized resid
qqPlot(fit, main="QQ Plot")
# distribution of studentized residuals
library(MASS)
sresid <- studres(fit)
hist(sresid, freq=FALSE,
     main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)

# Evaluate homoscedasticity
# non-constant error variance test
ncvTest(fit)
# plot studentized residuals vs. fitted values
spreadLevelPlot(fit)

# Evaluate Collinearity or multicollinearity
vif(fit) # variance inflation factors
sqrt(vif(fit)) > 2 # problem?

# Evaluate Nonlinearity
# component + residual plot
crPlots(fit)
# Ceres plots
ceresPlots(fit)

# Test for Autocorrelated Errors
durbinWatsonTest(fit)

# Global test of model assumptions
install.packages("gvlma")
library(gvlma)
gvmodel <- gvlma(fit)
summary(gvmodel)
